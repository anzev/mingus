#summary Reference documentation for `mingus.midi.pyfluidsynth`.
----
= mingus.midi.pyfluidsynth =
Python bindings for FluidSynth.

FluidSynth is a software synthesizer for generating music.  It works like a
MIDI synthesizer.

You load patches, set parameters, then send NOTEON and NOTEOFF events to
play notes.

Instruments are defined in SoundFonts, generally files with the extension
SF2.

FluidSynth can either be used to play audio itself, or you can call a
function that returns chunks of audio data and output the data to the
soundcard yourself.

FluidSynth works on all major platforms, so pyFluidSynth should also.

----
== Attributes ==
=== `DEFAULT_MODE` ===
  * *Type*: int
  * *Value*: `0`

=== `RTLD_GLOBAL` ===
  * *Type*: int
  * *Value*: `256`

=== `RTLD_LOCAL` ===
  * *Type*: int
  * *Value*: `0`

=== `api_version` ===
  * *Type*: str
  * *Value*: `'1.2'`

=== `cdll` ===
  * *Type*: ctypes.LibraryLoader
  * *Value*: `<ctypes.LibraryLoader object at 0x8e4b70c>`

=== `lib` ===
  * *Type*: str
  * *Value*: `'libfluidsynth.so.1'`

=== `pydll` ===
  * *Type*: ctypes.LibraryLoader
  * *Value*: `<ctypes.LibraryLoader object at 0x8e4b72c>`

=== `pythonapi` ===
  * *Type*: ctypes.PyDLL
  * *Value*: `<PyDLL 'None', handle b78f7908 at 8e4b74c>`

----
== Functions ==
=== `ARRAY(typ, len)` ===
=== `CFUNCTYPE(restype)` ===
CFUNCTYPE(restype, *argtypes,
             use_errno=False, use_last_error=False) -> function prototype.

restype: the result type
argtypes: a sequence specifying the argument types

The function prototype can be called in different ways to create a
callable object:

prototype(integer address) -> foreign function
prototype(callable) -> create and return a C callable function from callable
prototype(integer index, method name[, paramflags]) -> foreign function calling a COM method
prototype((ordinal number, dll object)[, paramflags]) -> foreign function exported by ordinal
prototype((function name, dll object)[, paramflags]) -> foreign function exported by name

=== `PYFUNCTYPE(restype)` ===
=== `SetPointerType(pointer, cls)` ===
=== `c_buffer(init, size)` ===
  * *Default values*: size = None
=== `cast(obj, typ)` ===
=== `cfunc(name, result)` ===
Build and apply a ctypes prototype complete with parameter flags.

=== `create_string_buffer(init, size)` ===
  * *Default values*: size = None
create_string_buffer(aString) -> character array
create_string_buffer(anInteger) -> character array
create_string_buffer(aString, anInteger) -> character array

=== `create_unicode_buffer(init, size)` ===
  * *Default values*: size = None
create_unicode_buffer(aString) -> character array
create_unicode_buffer(anInteger) -> character array
create_unicode_buffer(aString, anInteger) -> character array

=== `find_library(name)` ===
=== `fluid_synth_write_s16_stereo(synth, len)` ===
Return generated samples in stereo 16-bit format.

Return value is a Numpy array of samples.

=== `raw_audio_string(data)` ===
Return a string of bytes to send to soundcard.

Input is a numpy array of samples. Default output format is 16-bit
signed (other formats not currently supported).

=== `string_at(ptr, size)` ===
  * *Default values*: size = -1
string_at(addr[, size]) -> string

Return the string at addr.

=== `wstring_at(ptr, size)` ===
  * *Default values*: size = -1
wstring_at(addr[, size]) -> string

Return the string at addr.

----
[mingusIndex Back to Index]
